"""Wrapper around SciPy interpolation.

This module takes care of differences in assumptions about axes and
ordering of dimensions between raster files and numpy arrays.
"""

import numpy
from scipy.interpolate import RectBivariateSpline, interp1d


def raster_spline(longitudes, latitudes, values):
    """Create spline for bivariate interpolation

    Input
        longitudes: array of monotoneously increasing latitudes (west to east)
        latitudes: array of monotoneously increasing latitudes (south to north)
        values: 2d array of values defined on grid points corresponding to
                given longitudes and latitudes

    Output
        Callable object F that returns interpolated values for arbitrary
        points within the specified domain.
        F is called as F(lon, lat) where lon and lat are either
        single valued or vector valued. Values outside domain raises an
        exception. (NOT YET IMPLEMENTED)
    """

    # Input checks
    assert len(longitudes) == values.shape[1]
    assert len(latitudes) == values.shape[0]

    # Flip matrix A up-down so that scipy will interpret latitudes correctly.
    A = numpy.flipud(values)

    # Call underlying spline
    F = RectBivariateSpline(latitudes, longitudes, A)

    # Return interpolator
    return Interpolator(F, longitudes, latitudes)


class Interpolator:
    """Class providing callable 2D interpolator

    To call: I(longitudes, latitudes)

    This is generated by the function raster_spline.
    """

    def __init__(self, F, longitudes, latitudes):
        self.F = F
        self.minlon = longitudes[0]
        self.maxlon = longitudes[-1]
        self.minlat = latitudes[0]
        self.maxlat = latitudes[-1]

    def __call__(self, lon, lat):

        msg = ('Requested interpolation longitude %f lies outside '
               'interpolator bounds [%f, %f]. '
               'Assigning NaN.' % (lon, self.minlon, self.maxlon))
        if not self.minlon <= lon <= self.maxlon:
            #print msg
            return numpy.nan

        msg = ('Requested interpolation latitude %f lies outside '
               'interpolator bounds [%f, %f]. '
               'Assigning NaN.' % (lat, self.minlat, self.maxlat))
        if not self.minlat <= lat <= self.maxlat:
            #print msg
            return numpy.nan

        return self.F(lat, lon)
