#! /bin/bash

sudo apt-get -y update

#export DEBIAN_FRONTEND=noninteractive
# For Java 6 JDK
#sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
# For GeoNode
#sudo add-apt-repository "deb http://apt.opengeo.org/lucid lucid main"
#sudo apt-get -y update
 # 'Accept' SunOracle Licensing
#sudo echo "sun-java6-bin shared/accepted-sun-dlj-v1-1 boolean true" | sudo debconf-set-selections
#sudo echo "sun-java6-jdk shared/accepted-sun-dlj-v1-1 boolean true" | sudo debconf-set-selections
#sudo echo "sun-java6-jre shared/accepted-sun-dlj-v1-1 boolean true" | sudo debconf-set-selections
#sudo echo "sun-java6-jre sun-java6-jre/stopthread boolean true" | sudo debconf-set-selections
#sudo echo "sun-java6-jre sun-java6-jre/jcepolicy note" | sudo debconf-set-selections
#sudo echo "sun-java6-bin shared/present-sun-dlj-v1-1 note" | sudo debconf-set-selections
#sudo echo "sun-java6-jdk shared/present-sun-dlj-v1-1 note" | sudo debconf-set-selections
#sudo echo "sun-java6-jre shared/present-sun-dlj-v1-1 note" | sudo debconf-set-selections
# Recommended, and useful for Ubuntu 10.04
#sudo apt-get install -y --force-yes sun-java6-jdk

# Needed for auto installation in Ubuntu 10.10
sudo apt-get install -y --force-yes openjdk-6-jre-headless

echo ">>> Installing Ubuntu packages"
# Python development prerequisites
sudo apt-get install -y vim zip unzip subversion git-core binutils build-essential python-dev python-setuptools python-imaging python-reportlab gdal-bin libproj-dev libgeos-dev python-urlgrabber python-scipy python-nose pep8 python-virtualenv python-numpy python-scipy python-gdal python-pastescript

function checkup() {
  REPO="$1"
  WORKING_DIR="$2"
  if [ -d "${WORKING_DIR}" ];
  then
      echo "Updating ${WORKING_DIR} from upstream"
      (cd "${WORKING_DIR}" && git pull)
  else
      git clone "git@github.com:${REPO}" "${WORKING_DIR}" || git clone "https://github.com/${REPO}" "${WORKING_DIR}"
  fi
}

echo ">>> Cloning the repositories"
# Get riab source code
checkup GeoNode/geonode.git geonode
checkup AIFDR/riab.git riab

echo ">>> Creating the virtual environment"
if [ -d riab_env ]; then
    echo 'It already exists...'
else
    virtualenv riab_env
fi


if grep -Fxq "DJANGO_SETTINGS_MODULE" riab_env/bin/activate
then
    # Do not do anything
    echo
else
    echo 'export DJANGO_SETTINGS_MODULE=risiko.settings' >> riab_env/bin/activate
fi


if grep -Fxq "RIAB_HOME" ~/bash_aliases
then
    echo
else
    echo "export RIAB_HOME=`pwd`" >> ~/.bash_aliases
    echo 'alias risikon="source $RIAB_HOME/riab_env/bin/activate"' >> ~/.bash_aliases
fi

if grep -Fxq "RIAB_DATA" ~/bash_aliases
then
    echo
else
    echo "export RIAB_DATA=$RIAB_HOME/riab_data" >> ~/.bash_aliases
fi

source ~/.bash_aliases
source riab_env/bin/activate

echo ">>> Downloading riab-libs.pybundle and tomcat bundle"
# Install GeoNode and it's pre-requisites
mkdir temp; cd temp
wget -c http://203.77.224.75/riab/riab-libs.pybundle
wget -c http://203.77.224.75/riab/tomcat-redist.tar.gz
pip install riab-libs.pybundle

#FIXME: Add this to the bundle
pip install -U mock
tar xzf tomcat-redist.tar.gz
mv apache-tomcat-6.0.32 ../tomcat
cd ..

echo ">>> Installing GeoNode and Riab in dev mode"
pip install -e geonode/src/GeoNodePy
pip install -e riab

echo ">>> Get bundled test and demo data"
mkdir $RIAB_DATA; cd $RIAB_DATA
export TESTDATA_BUNDLE='risiko_test_data.tgz'
export TESTDATA_SOURCE="http://203.77.224.75/riab/$TESTDATA_BUNDLE"
wget -c $TESTDATA_SOURCE
tar xvfz $TESTDATA_BUNDLE
/bin/rm $TESTDATA_BUNDLE

export TESTDATA_BUNDLE='risiko_demo_data.tgz'
export TESTDATA_SOURCE="http://203.77.224.75/riab/$TESTDATA_BUNDLE"
wget -c $TESTDATA_SOURCE
tar xvfz $TESTDATA_BUNDLE
/bin/rm $TESTDATA_BUNDLE

cd ..

echo ""
echo ">>> Running the test suite"
risiko-test

echo ""
echo "Congratulations, you have installed Risk in a Box"
echo "You may want to create a superuser to administer Risk in a Box as follows"
echo "python django-admin.py createsuperuser"
echo
echo "To start the server run the following command:"
echo ""
echo "risiko-start"
