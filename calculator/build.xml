<?xml version="1.0" encoding="UTF-8"?>
<project name="calculator" default="dist" basedir=".">

    <description>
        Risiko Calculator Build File
    </description>

    <property name="build" location="build"/>
    <property name="externals" location="app/static/externals/"/>
    <property name="app.proxy.geoserver" value="http://localhost:8001/geoserver-geonode-dev"/>
    <property name="app.proxy.geonode" value="http://localhost:8000"/>
    <property name="app.port" value="8080"/>

    <target name="init">

        <mkdir dir="${build}"/>

        <echo message="pulling in ringo"/>
        <get src="http://cloud.github.com/downloads/ringo/ringojs/ringojs-0.7.zip" dest="${build}/ringojs-0.7.zip"/>
        <unzip src="${build}/ringojs-0.7.zip" dest="${build}"/>
        <move todir="${build}/ringo">
          <fileset dir="${build}/ringojs-0.7"/>
        </move>
        <!-- uncomment this if you have additional jars in a lib dir
        <copy todir="${build}/ringo/lib" flatten="true" includeEmptyDirs="false">
            <fileset dir="lib"/>
        </copy>
        -->

        <echo message="pulling in buildkit (ignore fatal warning)"/>
        <mkdir dir="${build}/buildkit"/>
        <exec executable="git" dir="${build}/buildkit" failonerror="false">
            <arg line="clone -nq git://github.com/tschaub/buildkit.git ."/>
        </exec>
        <exec executable="git" dir="${build}/buildkit" failonerror="true">
            <arg line="pull origin master"/>
        </exec>
        <exec executable="git" dir="${build}/buildkit" failonerror="true">
            <arg line="checkout 86eacbd7b3bf62b8e99f46911dd5a633464b8570"/>
        </exec>

        <echo message="pulling in js dependencies"/>
        <get src="https://github.com/openlayers/openlayers/zipball/2.x" dest="${build}/openlayers.zip"/>
        <unzip src="${build}/openlayers.zip" dest="${externals}"/>
        <exec executable="sh" dir="${externals}" failonerror="true">
          <arg line="-c 'rm -Rf openlayers &amp;&amp; mv openlayers-openlayers-* openlayers'"/>
        </exec>
        <get src="https://github.com/opengeo/GeoExt/zipball/master" dest="${build}/geoext.zip"/>
        <unzip src="${build}/geoext.zip" dest="${externals}"/>
        <exec executable="sh" dir="${externals}" failonerror="true">
          <arg line="-c 'rm -Rf geoext &amp;&amp; mv opengeo-GeoExt-* geoext'"/>
        </exec>
        <get src="https://github.com/opengeo/gxp/zipball/master" dest="${build}/gxp.zip"/>
        <unzip src="${build}/gxp.zip" dest="${externals}"/>
        <exec executable="sh" dir="${externals}" failonerror="true">
          <arg line="-c 'rm -Rf gxp &amp;&amp; mv opengeo-gxp-* gxp'"/>
        </exec>

    </target>
    
    <target name="buildjs">

        <mkdir dir="${build}/${ant.project.name}/WEB-INF/app/static/script"/>
        <java jar="${build}/ringo/run.jar" fork="true" failonerror="true">
            <sysproperty key="ringo.home" path="${build}/ringo"/>
            <arg path="${build}/buildkit/lib/buildkit/build.js"/>
            <arg line="-o ${build}/${ant.project.name}/WEB-INF/app/static/script buildjs.cfg"/>
        </java>

    </target>
    
    <target name="dist" depends="buildjs, redist, deploy"/>
    
    <target name="redist">

        <mkdir dir="${build}/${ant.project.name}"/>
        
        <copy todir="${build}/${ant.project.name}">
            <fileset dir="src/main/webapp/">
            </fileset>
        </copy>
        <copy todir="${build}/${ant.project.name}/WEB-INF/lib" flatten="true" includeEmptyDirs="false">
            <fileset dir="${build}/ringo/lib"/>
        </copy>
        <copy todir="${build}/${ant.project.name}/WEB-INF/app">
            <fileset dir="app">
                <exclude name="**/externals/**"/>
                <exclude name="**/script/**"/>
            </fileset>
        </copy>
        <!-- copy Ext resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/ext">
            <fileset dir="app/static/externals/ext"/>
        </copy>
        <!-- copy OpenLayers resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/openlayers/theme">
            <fileset dir="app/static/externals/openlayers/theme"/>
        </copy>
        <!-- copy GeoExt resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/geoext/resources">
            <fileset dir="app/static/externals/geoext/resources"/>
        </copy>
        <!-- copy gxp resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/gxp/src/theme">
            <fileset dir="app/static/externals/gxp/src/theme"/>
        </copy>
    </target>

    <target name="deploy">
        <mkdir dir="${build}/../../impact/static/"/>
        <mkdir dir="${build}/../../impact/static/calculator"/>
        <copy todir="${build}../../impact/static/calculator">
            <fileset dir="${build}/${ant.project.name}/WEB-INF/app/static/"/>
        </copy>
    </target>

    <target name="debug">
        <java jar="${build}/ringo/run.jar" fork="true">
            <sysproperty key="app.proxy.geoserver" value="${app.proxy.geoserver}"/>
            <sysproperty key="app.proxy.geonode" value="${app.proxy.geonode}"/>
            <sysproperty key="ringo.home" path="${build}/ringo"/>
            <arg path="app/main.js"/>
            <arg line="-p ${app.port}"/>
        </java>
    </target>

    <target name="debugall">
        <java jar="${build}/ringo/run.jar" fork="true">
            <sysproperty key="app.proxy.geoserver" value="${app.proxy.geoserver}"/>
            <sysproperty key="ringo.home" path="${build}/ringo"/>
            <arg value="-d"/>
            <arg path="app/main.js"/>
            <arg line="-p ${app.port}"/>
        </java>
    </target>

    <target name="static-war" depends="dist">
        <war destfile="${build}/${ant.project.name}.war" needxmlfile="false">
            <fileset dir="${build}/${ant.project.name}/WEB-INF/app/static"/>
        </war>
    </target>

    <target name="war" depends="dist">
        <war destfile="${build}/${ant.project.name}.war">
            <fileset dir="${build}/${ant.project.name}"/>
        </war>
    </target>

    <target name="clean" description="remove previous build and all dependencies">
        <delete dir="${build}"/>
    </target>

</project>
