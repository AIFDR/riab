from geonode.maps.utils import file_upload, GeoNodeException
import os

import logging
logger = logging.getLogger('risiko')


class RisikoException(Exception):
    pass

def run(cmd, stdout=None, stderr=None):
    """Run command with stdout and stderr optionally redirected

    The logfiles are only kept in case the command fails.
    """

    # Build command
    msg = 'Argument cmd must be a string. I got %s' % cmd
    assert isinstance(cmd, basestring), msg

    s = cmd
    if stdout is not None:
        msg = 'Argument stdout must be a string or None. I got %s' % stdout
        assert isinstance(stdout, basestring), msg
        s += ' > %s' % stdout

    if stderr is not None:
        msg = 'Argument stderr must be a string or None. I got %s' % stdout
        assert isinstance(stderr, basestring), msg
        s += ' 2> %s' % stderr

    # Run command
    err = os.system(s)

    if err != 0:
        msg = 'Command "%s" failed with errorcode %i. ' % (cmd, err)
        if stdout:
            msg += 'See logfile %s for stdout details' % stdout
        if stderr is not None:
            msg += 'See logfile %s for stderr details' % stderr
        raise Exception(msg)
    else:
        # Clean up
        os.remove(stdout)
        os.remove(stderr)


def save_file_to_geonode(filename, user=None, title='Risiko layer',
                         overwrite=False):
    """Save a single layer file to local Risiko GeoNode

    Input
        filename: Layer filename of type .tif, .asc, .shp #or (.gml)
        user: Django User object
        title: String describing the layer
        overwrite: Boolean variable controlling whether existing layers
                   can be overwritten by this operation. Default is False
    Output
        layer object
    """

    # Extract fully qualified basename and extension
    basename, extension = os.path.splitext(filename)

    if extension == '.asc':
        # We assume this is an AAIGrid ASCII file such as those generated by
        # ESRI and convert it to Geotiff before uploading.

        # Create temporary tif file for upload and check that the road is clear
        upload_filename = basename + '.tif'
        msg = ('You have asked to upload the ASCII file "%s" and to do so I '
               'must first convert it to the TIF format. However, there is '
               'already a file named "%s" so you have to remove that first '
               'and try again. Sorry about that.' % (filename,
                                                     upload_filename))
        assert not os.path.exists(upload_filename), msg

        # Convert ASCII file to GeoTIFF
        cmd = ('gdal_translate -ot Float64 -of GTiff -co "PROFILE=GEOTIFF" '
               '%s %s' % (filename, upload_filename))

        run(cmd,
            stdout='%s_asc2tif_conversion.stdout' % basename,
            stderr='%s_asc2tif_conversion.stderr' % basename)
    else:
        # The specified file is the one to upload
        upload_filename = filename

    # Upload
    try:
        layer = file_upload(upload_filename,
                            user=user,
                            title=title,
                            overwrite=overwrite)
    except GeoNodeException, e:
        # Layer did not upload, re-raise exception
        raise RisikoException(e)
    else:
        # Return layer object
        return layer
    finally:
        # Clean up in either case
        if extension == '.asc':
            os.remove(upload_filename)
            os.remove(upload_filename + '.aux.xml')


def save_directory_to_geonode(directory, user=None, title=None, overwrite=True):
    """Upload a directory of spatial data files to GeoNode

    Input
        directory: Valid root directory for layer files
        user: Django User object
        overwrite: Boolean variable controlling whether existing layers
                   can be overwritten by this operation. Default is False
    Output
        list of layer objects
    """

    msg = ('Argument %s to save_directory_to_geonode is not a valid directory.'
           % directory)
    assert os.path.isdir(directory), msg

    layers = []
    for root, dirs, files in os.walk(directory):
        for short_filename in files:
            basename, extension = os.path.splitext(short_filename)
            filename = os.path.join(root, short_filename)

            # Attempt upload only if extension is recognised
            if extension in ['.tif', '.asc', '.shp', '.zip']:
                try:
                    layer = save_to_geonode(filename,
                                            user=user,
                                            title=title,
                                            overwrite=overwrite)

                except RisikoException, e:
                    msg = ('Filename "%s" could not be uploaded. '
                           'Error was: %s' % (filename, str(e)))
                    logger.info(msg)
                else:
                    layers.append(layer)
            else:
                msg = ('Did not attempt to upload filename "%s" '
                       'as it is an unrecognised type ' % filename)
                logger.info(msg)

    # Return layers that successfully uploaded
    return layers

def save_to_geonode(incoming, user=None, title=None, overwrite=False):
    """Save a files to local Risiko GeoNode

    Input
        incoming: Either layer file or directory
        user: Django User object
        title: If specified, it will be applied to all files. If None
               filenames will be used to infer titles.
        overwrite: Boolean variable controlling whether existing layers
                   can be overwritten by this operation. Default is False

    Output
        layer object or list of layer objects
    """

    msg = ('First argument to save_to_geonode must be a string. '
           'I got %s' % incoming)
    assert isinstance(incoming, basestring), msg

    if os.path.isdir(incoming):
        # Upload all valid layer files in this dir recursively

        save_directory_to_geonode(incoming, title=title, user=user,
                                  overwrite=overwrite)
    elif os.path.isfile(incoming):
        # Upload single file (using its name as title)
        basename, ext = os.path.splitext(incoming)

        if title is None:
            title = os.path.split(basename)[-1]

        layer = save_file_to_geonode(incoming, title=title, user=user,
                                     overwrite=overwrite)
        return layer
    else:
        msg = 'Argument %s was neither a file or a directory' % incoming
        raise RisikoException(msg)
