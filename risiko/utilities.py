from geonode.maps.utils import file_upload
import os

def run(cmd, stdout=None, stderr=None):
    """Run command with stdout and stderr optionally redirected

    The logfiles are only kept in case the command fails.
    """

    # Build command
    msg = 'Argument cmd must be a string. I got %s' % cmd
    assert isinstance(cmd, basestring), msg

    s = cmd
    if stdout is not None:
        msg = 'Argument stdout must be a string or None. I got %s' % stdout
        assert isinstance(stdout, basestring), msg
        s += ' > %s' % stdout

    if stderr is not None:
        msg = 'Argument stderr must be a string or None. I got %s' % stdout
        assert isinstance(stderr, basestring), msg
        s += ' 2> %s' % stderr

    # Run command
    err = os.system(s)

    if err != 0:
        msg = 'Command "%s" failed with errorcode %i. ' % (cmd, err)
        if stdout:
            msg += 'See logfile %s for stdout details' % stdout
        if stderr is not None:
            msg += 'See logfile %s for stderr details' % stderr
        raise Exception(msg)
    else:
        # Clean up
        os.remove(stdout)
        os.remove(stderr)


def save_to_geonode(filename, user=None, title='Risiko layer',
                    overwrite=False, return_url=True):
    """Save a layer file in local Risiko GeoNode

    Input
        filename: Layer filename of type .tif, .asc, .shp #or (.gml)
        user: Django User object
        title: String describing the layer
        overwrite: Boolean variable controlling whether existing layers
                   can be overwritten by this operation. Default is False
        return_url: Boolean variable controlling the return value:
                    If return_url is True (the default), the function
                    returns an URL to the newly uploaded layer. If it is
                    False, a Django layer object is returned.

    Output
        layer object or URL to layer
    """

    # Extract names and extension
    pathname, extension = os.path.splitext(filename)
    layername = os.path.split(pathname)[-1]

    if extension == '.asc':
        # We assume this is an AAIGrid ASCII file such as those generated by
        # ESRI and convert it to Geotiff before uploading.

        # File names
        upload_filename = layername + '.tif'

        cmd = ('gdal_translate -ot Float64 -of GTiff -co "PROFILE=GEOTIFF" '
               '%s %s' % (filename, upload_filename))

        run(cmd,
            stdout='convert_%s.stdout' % layername,
            stderr='convert_%s.stderr' % layername)
    else:
        upload_filename = filename

    # Upload
    layer = file_upload(upload_filename,
                        user=user,
                        title=title,
                        overwrite=False)

    # Clean up
    if extension == '.asc':
        os.remove(upload_filename)

    # Return layer object
    if return_url is True:
        return layer.get_absolute_url()
    else:
        return layer
